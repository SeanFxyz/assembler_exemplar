#!/bin/env python3

# Gogo - A Python script to generate GDScript documentation.

from argparse import ArgumentParser as ArgParser
from pathlib import Path
import json

def parse(script_file):

    lines = script_file.readlines()

    class_attrs = {
        "info": [],
        "properties": [],
        "methods": [],
    }

    def add_attr(kind, name, start, end):

        if name:
            class_attrs[kind].append({
                "name": name,
                "description": "".join(
                    map( (lambda a : a[2:]), lines[start:end] ))
            })
        else:
            class_attrs[kind].append({
                "description": "".join(
                    map( (lambda a : a[2:]), lines[start:end] ))
            })

    i = 0
    while i < len(lines):

        if lines[i].startswith("#"):

            comment_end = i
            while comment_end < len(lines):
                comment_end += 1
                if not lines[comment_end].startswith("#"):
                    break

            if lines[comment_end].startswith("var"):

                attr_name = (lines[comment_end]
                             .split("var ")[1]
                             .split("=")[0]
                             .split(":")[0]
                             .strip())
                add_attr("properties", attr_name, i, comment_end)

            elif lines[comment_end].startswith("func"):

                attr_name = lines[comment_end].split("func ")[1].strip()[:-1]
                add_attr("methods", attr_name, i, comment_end)

            else:
                add_attr("info", "", i, comment_end)

            i = comment_end

        i += 1

    print(json.dumps(class_attrs, indent='  '))
    return class_attrs


def docify(name, attrs):

    class_desc = "\n".join([i["description"] for i in attrs["info"]])
    plist = "\n".join(["* `" + p['name'] + "`" for p in attrs["properties"]])
    mlist = "\n".join(["* `" + p["name"] + "`" for m in attrs["methods"]])
    pdesc = "\n".join([
        "### `" + p["name"] + "`\n" + p["description"]
        for p in attrs["properties"]
    ])
    mdesc = "\n".join([
        "### `" + m["name"] + "`\n" + m["description"]
        for m in attrs["methods"]
    ])

    return f"""
# `{name}`
###### generated by gogo

## Description
{class_desc}

## Properties
{plist}

## Methods
{mlist}

## Property Descriptions
{pdesc}

## Method Descriptions
{mdesc}

""".strip()


def make_docs(target_dir, source_dir):

    files = source_dir.glob("**/*.gd")

    for f in files:
        print(str(f) + ":")
        with open(f) as script_file:
            attrs = parse(script_file)
            stem = Path(f).stem
            doc_content = docify(stem, attrs)

            if not target_dir.is_dir():
                target_dir.mkdir(parents=True, exist_ok=True)

            doc_filename = Path(target_dir, stem + ".md")
            with open(doc_filename, 'w') as doc_file:
                doc_file.write(doc_content)


if __name__ == "__main__":

    parser = ArgParser(description="Generate GDScript documentation.")
    parser.add_argument(
        "-t", "--target", metavar="target", required=False,
        type=Path, default=Path("docs", "gogo"),
        help="The target documentation directory."
    )
    parser.add_argument(
        "-s", "--source", metavar="source", required=False,
        type=Path, default=Path("src"),
        help="The directory to search for GDScript source files."
    )

    args = parser.parse_args()

    make_docs(args.target, args.source)
